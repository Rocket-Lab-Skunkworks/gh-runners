#!/bin/bash

## Change variables here
APP_NAME=lnx-vm5
IMAGE_TAG="ubuntu:24.04"


## These variables usually do not change
NET_NAME=bridge1
APPS_FOLDER=apps
APPS_PATH=/opt/$APPS_FOLDER
APP_USER_NAME=user1
SHARED_GROUP_NAME=d_staff
SHARED_GROUP_ID=110011
# create group in macos
# sudo dscl . -create /Groups/d_staff gid 110011
# delete group
# sudo dscl . -delete /Groups/groupname
# add user to group
# sudo dscl . -append /Groups/d_staff GroupMembership jason


COMMON_RUN_OPTIONS="--net $NET_NAME
-v $PWD:/opt"


auto_create_bridge() {
  docker network ls | grep "$NET_NAME" > /dev/null
  if [ ! $? = 0 ]; then docker network create $NET_NAME; fi
}


create_data_folder() {
  if [ ! -d $PWD/$APPS_FOLDER ]; then mkdir -p $PWD/$APPS_FOLDER ; fi
}


docker_start() {
  create_data_folder

  if [ "$(docker ps -a -q -f name=$APP_NAME)" ]; then
    echo ">> Starting existing container:"
    docker container start $APP_NAME
  else
    runcmd="docker run --restart=always -dit $COMMON_RUN_OPTIONS --name=$APP_NAME $IMAGE_TAG /opt/run entry $(id -u)"

    echo $runcmd
    $runcmd
  fi
}


app_create_user() {
  HOST_USER_ID=$1
  if id "$APP_USER_NAME" &>/dev/null; then
    echo "User exists"
  else
    # add -u $HOST_USER_ID  to create user inside container with same id as host user
    # does not work on Macos as user id is below min range 1000, so we use a new shared group instead
    groupadd -g $SHARED_GROUP_ID $SHARED_GROUP_NAME

    chown -R root:$SHARED_GROUP_NAME $APPS_PATH
    chmod -R ug+rwx $APPS_PATH
  
    # create home folder in specific location
    # -m -d "$APPS_PATH/$APP_USER_NAME"
    useradd -m -G $SHARED_GROUP_NAME -s /bin/bash $APP_USER_NAME
  fi
}


app_setup_users() {
  grep "alias dir=\"" /root/.bashrc
  if [ ! "$?" = "0" ]; then
    echo "alias dir=\"ls -hal --color\"" >> /root/.bashrc
  fi

  grep "alias dir=\"" /home/$APP_USER_NAME/.bashrc
  if [ ! "$?" = "0" ]; then
    echo "alias dir=\"ls -hal --color\"" >> /home/$APP_USER_NAME/.bashrc
  fi
}


app_start_github_runner_agent() {
  GH_RUNNER_PATH="$APPS_PATH/gh"
  if [ ! -f $GH_RUNNER_PATH/actions-runner/.credentials ]; then
    echo "Runner not configured, running shell"
    /bin/sh
  else
    echo "Running github runner"
    su - $APP_USER_NAME $GH_RUNNER_PATH/actions-runner/run.sh
  fi
}

app_start_services() {
  app_start_github_runner_agent
}


app_entry() {
  HOST_USER_ID=$1
  echo "** Starting Container VM $APP_NAME"

  app_create_user $HOST_USER_ID
  app_setup_users

  app_start_services

  read -p "" NOT_USED_READ_VARIABLE_${RANDOM}
}


if [ "$1" = "start" ]; then auto_create_bridge ; docker_start ; exit $?; fi
if [ "$1" = "stop" ]; then docker stop -t 1 $APP_NAME ; exit $?; fi
if [ "$1" = "rm" ]; then docker stop -t 1 $APP_NAME ; docker container rm $APP_NAME ; exit $?; fi

if [ "$1" = "logs" ]; then docker logs $2 $3 $4 $APP_NAME;  exit $?; fi
if [ "$1" = "term" ]; then docker exec -it $APP_NAME /bin/bash ; exit $?; fi
if [ "$1" = "root" ]; then docker exec --user 0:0 -it $APP_NAME /bin/bash ; exit $?; fi

if [ "$1" = "entry" ]; then app_entry $2; exit $?; fi

echo "Command not found"
